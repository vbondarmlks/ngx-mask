{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/ngx-mask/config.ts","webpack:///./src/app/ngx-mask/mask-applier.service.ts","webpack:///./src/app/ngx-mask/mask.directive.ts","webpack:///./src/app/ngx-mask/mask.pipe.ts","webpack:///./src/app/ngx-mask/mask.service.ts","webpack:///./src/app/ngx-mask/ngx-mask.module.ts","webpack:///./src/app/ngx-mask/test/utils/test-component.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<style>\\r\\n  mat-sidenav {\\r\\n    display: flex;\\r\\n    overflow: visible;\\r\\n  }\\r\\n</style>\\r\\n<mat-sidenav-container>\\r\\n  <mat-sidenav mode=\\\"side\\\" opened=\\\"false\\\">Side menu</mat-sidenav>\\r\\n  <header>\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-7\\\">\\r\\n          <div class=\\\"logo align-middle\\\">\\r\\n            <a target=\\\"_blank\\\" href=\\\"http://jsdaddy.io/\\\"><img src=\\\"assets/img/logo.png\\\" alt=\\\"jsdaddy\\\"></a>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"col-5\\\">\\r\\n          <h1 class=\\\"title\\\">\\r\\n            <span class=\\\"jq-label\\\">Angular</span>\\r\\n            <span class=\\\"plugin-name\\\">Mask Plugin</span>\\r\\n          </h1>\\r\\n          <span class=\\\"subtitle\\\">Angular Plugin to make masks on form fields and html elements.</span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </header>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-grid-wr\\\">\\r\\n          <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"55px\\\">\\r\\n            <mat-grid-tile>\\r\\n              <mat-toolbar>\\r\\n                <span>Examples</span>\\r\\n              </mat-toolbar>\\r\\n            </mat-grid-tile>\\r\\n          </mat-grid-list>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Mask common case</mat-card-title>\\r\\n              <mat-card-subtitle>An case of date mask</mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <br>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Date\\\" mask=\\\"00/00/0000\\\" [formControl]=\\\"formDate\\\" [(ngModel)]=\\\"formModelDate\\\">\\r\\n                    <mat-hint> <b>Mask:</b> \\\"00/00/0000\\\" </mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ formDate.value ? formDate.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ formModelDate ? formModelDate: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Other common cases</mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-mat-3\\\">\\r\\n                  <div class=\\\"mat-form-wr\\\">\\r\\n                    <mat-form-field>\\r\\n                      <input matInput placeholder=\\\"Date and Hour\\\" mask=\\\"00/00/00 00:00:00\\\">\\r\\n                      <mat-hint> <b>Mask:</b> 00/00/00 00:00:00</mat-hint>\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-mat-3\\\">\\r\\n                  <div class=\\\"mat-form-wr\\\">\\r\\n                    <mat-form-field>\\r\\n                      <input matInput placeholder=\\\"Hour\\\" mask=\\\"00:00:00\\\">\\r\\n                      <mat-hint> <b>Mask:</b> 00:00:00</mat-hint>\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-mat-3\\\">\\r\\n                    <div class=\\\"mat-form-wr\\\">\\r\\n                      <mat-form-field>\\r\\n                        <input matInput placeholder=\\\"Valid 24 hour format\\\" mask=\\\"Hh:m0:s0\\\">\\r\\n                        <mat-hint> <b>Mask:</b> Hh:m0:s0</mat-hint>\\r\\n                      </mat-form-field>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                <div class=\\\"col-mat-3\\\">\\r\\n                  <div class=\\\"mat-form-wr\\\">\\r\\n                    <mat-form-field>\\r\\n                      <input matInput placeholder=\\\"Mixed Type\\\" mask=\\\"AAA 000-S0S\\\">\\r\\n                      <mat-hint> <b>Mask:</b> AAA 000-S0S</mat-hint>\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-mat-3\\\">\\r\\n                  <div class=\\\"mat-form-wr\\\">\\r\\n                    <mat-form-field>\\r\\n                      <input matInput placeholder=\\\"Valid date and month\\\" mask=\\\"d0/m0/0000\\\" [dropSpecialCharacters]=\\\"true\\\">\\r\\n                      <mat-hint> <b>Mask:</b> d0/m0/0000</mat-hint>\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-mat-3\\\">\\r\\n                  <div class=\\\"mat-form-wr\\\">\\r\\n                    <mat-form-field>\\r\\n                      <input matInput placeholder=\\\"Date and month with placeholder\\\" mask=\\\"d0/m0/0000\\\"\\r\\n                             [showMaskTyped]=\\\"true\\\"\\r\\n                             [shownMaskExpression]=\\\"'DD/MM/YYYY'\\\"\\r\\n                             [dropSpecialCharacters]=\\\"true\\\">\\r\\n                      <mat-hint> <b>Mask:</b> d0/m0/0000</mat-hint>\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Masks and special characters</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You could define if you want special characters propagate to the model or not with the\\r\\n                attribute <b>dropSpecialCharacters</b>.\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"CPF\\\" [dropSpecialCharacters]=\\\"true\\\" mask=\\\"000.000.000-00\\\"\\r\\n                      [formControl]=\\\"cpfFormControl\\\" [(ngModel)]=\\\"cpfModel\\\">\\r\\n                    <mat-hint> <b>Mask:</b> 000.000.000-00</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ cpfFormControl.value ? cpfFormControl.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ cpfModel ? cpfModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Clear if not match</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You could clear the input if the value not match the mask, you'll just need to set <b>clearIfNotMatch</b>\\r\\n                attribute.\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Clear if not match\\\" [clearIfNotMatch]=\\\"true\\\" mask=\\\"000.000\\\"\\r\\n                      [formControl]=\\\"clearIfNotMatch\\\" [(ngModel)]=\\\"clearIfNotMatchModel\\\">\\r\\n                    <mat-hint><b>Mask:</b>000.000</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ clearIfNotMatch.value ? clearIfNotMatch.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ clearIfNotMatchModel ? clearIfNotMatchModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Percent valid mask</mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Percent valid mask\\\"  mask=\\\"percent\\\" sufix=\\\"%\\\"\\r\\n                      [formControl]=\\\"percent\\\">\\r\\n                    <mat-hint><b>Mask:</b>percent</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ clearIfNotMatch.value ? clearIfNotMatch.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ clearIfNotMatchModel ? clearIfNotMatchModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Phone number</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You can add prefix to you masked value\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell-padding\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Phone number\\\" mask=\\\"(000) 000-0000\\\" prefix=\\\"+7\\\" [formControl]=\\\"form\\\"\\r\\n                      [(ngModel)]=\\\"dateModel\\\">\\r\\n                    <mat-hint><b>Mask: </b>+7 (000) 000 00 00</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ form.value ? form.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ dateModel ? dateModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Phone number</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You can add 'showMaskTyped' property to see maskExpression with underscores while typing\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell-padding\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Phone number\\\" mask=\\\"(000) 000-0000\\\" prefix=\\\"+5\\\" [showMaskTyped]=\\\"true\\\"\\r\\n                      [formControl]=\\\"form1\\\" [(ngModel)]=\\\"showMaskModel\\\">\\r\\n                    <mat-hint><b>Mask: </b>+5 (000) 000 0000</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ form1.value ? form1.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ showMaskModel ? showMaskModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>SUFIX</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You can add 'sufix' property\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell-padding\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Sum\\\" mask='00.00' sufix=\\\" $\\\" [formControl]=\\\"sufixForm\\\" [(ngModel)]=\\\"sufixModel\\\">\\r\\n                    <mat-hint><b>Mask: </b>0000.00</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ sufixForm.value ? sufixForm.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ sufixModel ? sufixModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Number or string</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You can pass in value of type number or string\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell-padding\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Type number or string\\\" mask=\\\"00*.00\\\" [formControl]=\\\"numberOrStringForm\\\"\\r\\n                      [(ngModel)]=\\\"numberOrStringFormModel\\\">\\r\\n                    <mat-hint><b>Mask: </b>000.00</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ numberOrStringForm.value ? numberOrStringForm.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ numberOrStringFormModel ? numberOrStringFormModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Repeat mask</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You can pass into mask pattern with brackets\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell-padding\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Repeat mask\\\" mask=\\\"A{5}\\\" [formControl]=\\\"repeatForm\\\" [(ngModel)]=\\\"repeatFormModel\\\">\\r\\n                    <mat-hint><b>Mask: </b>00000</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                  <p><b>FormControl:</b> {{ repeatForm.value ? repeatForm.value: 'Empty' }}</p>\\r\\n                  <p><b>NgModel:</b> {{ repeatFormModel ? repeatFormModel: 'Empty' }}</p>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Thousand separator mask</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You can devide your input by thousands\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell-padding\\\">\\r\\n                  <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Separator\\\" mask=\\\"coma_separator\\\" [formControl]=\\\"separatorForm\\\" [(ngModel)]=\\\"separatorFormModel\\\">\\r\\n                    <mat-hint><b>Mask: </b>separator</mat-hint>\\r\\n                  </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"flex-cell\\\">\\r\\n                    <p><b>FormControl:</b> {{ separatorForm.value ? separatorForm.value: 'Empty' }}</p>\\r\\n                    <p><b>NgModel:</b> {{ separatorFormModel ? separatorFormModel: 'Empty' }}</p>\\r\\n                  </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-card-wr\\\">\\r\\n          <mat-card>\\r\\n            <mat-card-header>\\r\\n              <mat-card-title>Custom Pattern an mask in pipe</mat-card-title>\\r\\n              <mat-card-subtitle>\\r\\n                You can pass array of maskExpression and CutomPattern into pipe\\r\\n              </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n              <div class=\\\"flex-row\\\">\\r\\n                <div class=\\\"flex-cell-padding\\\">\\r\\n                  <span>{{phone | mask: customMaska}}</span><br><br>\\r\\n                  <mat-hint>Mask: PPP-PPP-PPP</mat-hint>\\r\\n                </div>\\r\\n              </div>\\r\\n            </mat-card-content>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"mat-grid-wr\\\">\\r\\n          <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"55px\\\">\\r\\n            <mat-grid-tile>\\r\\n              <mat-toolbar>\\r\\n                <span>Documentation - see docs on\\r\\n                  <a class=\\\"git-link\\\" target=\\\"_blank\\\" href=\\\"https://github.com/JsDaddy/ngx-mask\\\">\\r\\n                    <img src=\\\"assets/img/github.png\\\" alt=\\\"github\\\">\\r\\n                  </a>\\r\\n                </span>\\r\\n              </mat-toolbar>\\r\\n            </mat-grid-tile>\\r\\n          </mat-grid-list>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</mat-sidenav-container>\\r\\n\"","import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  public phone: number = 123456789;\r\n  public customMaska: [string, pattern];\r\n\r\n  public form: FormControl;\r\n  public form1: FormControl;\r\n  public formDate: FormControl;\r\n  public cpfFormControl: FormControl;\r\n  public clearIfNotMatch: FormControl;\r\n  public numberOrStringForm: FormControl;\r\n  public sufixForm: FormControl;\r\n  public repeatForm: FormControl;\r\n  public separatorForm: FormControl;\r\n  public percent: FormControl;\r\n\r\n  public pattern: pattern =  {\r\n    'P': {\r\n        pattern: new RegExp('\\\\d'),\r\n    }};\r\n\r\n  public numberOrStringFormModel: string | number = '';\r\n  public clearIfNotMatchModel: string | number = '';\r\n  public formModelDate: string | number = '';\r\n  public cpfModel: string | number = '';\r\n  public dateModel: string | number = '';\r\n  public showMaskModel: string | number = '';\r\n  public suf: string = '+7';\r\n  public sufixModel: string | number;\r\n  public repeatFormModel: string | number;\r\n  public separatorFormModel: string | number;\r\n\r\n  public constructor() {\r\n    this.form = new FormControl('');\r\n    this.form1 = new FormControl('');\r\n    this.formDate = new FormControl('');\r\n    this.cpfFormControl = new FormControl();\r\n    this.clearIfNotMatch = new FormControl();\r\n    this.numberOrStringForm = new FormControl();\r\n    this.sufixForm = new FormControl('');\r\n    this.repeatForm = new FormControl('');\r\n    this.separatorForm = new FormControl('');\r\n    this.percent = new FormControl('');\r\n\r\n    this.customMaska = ['PPP-PPP-PPP', this.pattern];\r\n  }\r\n\r\n}\r\n\r\ntype pattern = {\r\n    [character: string]: {\r\n        pattern: RegExp\r\n    }\r\n};","import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {\r\n  MatButtonModule, MatCardModule, MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule,\r\n  MatListModule,\r\n  MatSelectModule, MatSidenavModule,\r\n  MatToolbarModule\r\n}\r\n  from\r\n    '@angular/material';\r\nimport { TestMaskComponent } from './ngx-mask/test/utils/test-component.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport 'hammerjs';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { NgxMaskModule } from './ngx-mask/ngx-mask.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    TestMaskComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    MatGridListModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    NgxMaskModule.forRoot(),\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatCardModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface IConfig {\r\n    sufix: string;\r\n    prefix: string;\r\n    clearIfNotMatch: boolean;\r\n    showTemplate: boolean;\r\n    showMaskTyped: boolean;\r\n    shownMaskExpression: string;\r\n    dropSpecialCharacters: boolean | string[];\r\n    specialCharacters: string[];\r\n    patterns: {\r\n        [character: string]: {\r\n            pattern: RegExp,\r\n            optional?: boolean\r\n        }\r\n    };\r\n}\r\n\r\nexport type optionsConfig = Partial<IConfig>;\r\nexport const config: InjectionToken<string> = new InjectionToken('config');\r\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\r\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\r\n\r\nexport const initialConfig: IConfig = {\r\n    sufix: '',\r\n    prefix: '',\r\n    clearIfNotMatch: false,\r\n    showTemplate: false,\r\n    showMaskTyped: false,\r\n    dropSpecialCharacters: true,\r\n    shownMaskExpression: '',\r\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\\\"', '\\''],\r\n    patterns: {\r\n        '0': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        '9': {\r\n            pattern: new RegExp('\\\\d'),\r\n            optional: true\r\n        },\r\n        'A': {\r\n            pattern: new RegExp('\\[a-zA-Z0-9\\]')\r\n        },\r\n        'S': {\r\n            pattern: new RegExp('\\[a-zA-Z\\]')\r\n        },\r\n        'd': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        'm': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        'H': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        'h': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        's': {\r\n            pattern: new RegExp('\\\\d'),\r\n        }\r\n    }\r\n};\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport { config, IConfig } from \"./config\";\r\n\r\n@Injectable()\r\nexport class MaskApplierService {\r\n  public dropSpecialCharacters: IConfig[\"dropSpecialCharacters\"];\r\n  public showTemplate: IConfig[\"showTemplate\"];\r\n  public clearIfNotMatch: IConfig[\"clearIfNotMatch\"];\r\n  public maskExpression: string = \"\";\r\n  public shownMaskExpression: string = \"\";\r\n  public maskSpecialCharacters: IConfig[\"specialCharacters\"];\r\n  public maskAvailablePatterns: IConfig[\"patterns\"];\r\n  public prefix: IConfig[\"prefix\"];\r\n  public sufix: IConfig[\"sufix\"];\r\n  public customPattern: IConfig[\"patterns\"];\r\n\r\n  private _shift: Set<number>;\r\n\r\n  public constructor(@Inject(config) protected _config: IConfig) {\r\n    this._shift = new Set();\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\r\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.prefix = this._config.prefix;\r\n    this.sufix = this._config.sufix;\r\n  }\r\n  // tslint:disable-next-line:no-any\r\n  public applyMaskWithPattern(\r\n    inputValue: string,\r\n    maskAndPattern: [string, IConfig[\"patterns\"]]\r\n  ): string {\r\n    const [mask, customPattern] = maskAndPattern;\r\n    this.customPattern = customPattern;\r\n    return this.applyMask(inputValue, mask);\r\n  }\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): string {\r\n    if (\r\n      inputValue === undefined ||\r\n      inputValue === null ||\r\n      maskExpression === undefined\r\n    ) {\r\n      return \"\";\r\n    }\r\n    let cursor: number = 0;\r\n    let result: string = ``;\r\n    let multi: boolean = false;\r\n\r\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\r\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\r\n    }\r\n\r\n    const inputArray: string[] = inputValue.toString().split(\"\");\r\n    if (maskExpression === \"percent\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      if (this.percentage(inputValue)) {\r\n        result = inputValue;\r\n      } else {\r\n        result = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n    } else if (maskExpression === \"separator\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      const strForSep: string = inputValue.replace(/\\s/g, \"\");\r\n      result = this.separator(strForSep);\r\n      position = result.length + 1;\r\n      cursor = position;\r\n      const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\r\n        ? inputArray.length\r\n        : cursor;\r\n      this._shift.add(shiftStep + this.prefix.length || 0);\r\n    } else if (maskExpression === \"dot_separator\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      const strForSep: string = inputValue.replace(/\\./g, \"\");\r\n      result = this.dotSeparator(strForSep);\r\n      position = result.length + 1;\r\n      cursor = position;\r\n      const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\r\n        ? inputArray.length\r\n        : cursor;\r\n      this._shift.add(shiftStep + this.prefix.length || 0);\r\n    } else if (maskExpression === \"coma_separator\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      const strForSep: string = inputValue.replace(/\\,/g, \"\");\r\n      result = this.comaSeparator(strForSep);\r\n      position = result.length + 1;\r\n      cursor = position;\r\n      const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\r\n        ? inputArray.length\r\n        : cursor;\r\n      this._shift.add(shiftStep + this.prefix.length || 0);\r\n    } else {\r\n      // tslint:disable-next-line\r\n      for (\r\n        let i: number = 0, inputSymbol: string = inputArray[0];\r\n        i < inputArray.length;\r\n        i++, inputSymbol = inputArray[i]\r\n      ) {\r\n        if (cursor === maskExpression.length) {\r\n          break;\r\n        }\r\n        if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n          maskExpression[cursor + 1] === \"?\"\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 2;\r\n        } else if (\r\n          maskExpression[cursor + 1] === \"*\" &&\r\n          multi &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n          multi = false;\r\n        } else if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n          maskExpression[cursor + 1] === \"*\"\r\n        ) {\r\n          result += inputSymbol;\r\n          multi = true;\r\n        } else if (\r\n          maskExpression[cursor + 1] === \"?\" &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\r\n          if (maskExpression[cursor] === \"H\") {\r\n            if (Number(inputSymbol) > 2) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"h\") {\r\n            if (result === \"2\" && Number(inputSymbol) > 3) {\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"m\") {\r\n            if (Number(inputSymbol) > 5) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"s\") {\r\n            if (Number(inputSymbol) > 5) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          result += inputSymbol;\r\n          cursor++;\r\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\r\n          if (maskExpression[cursor] === \"d\") {\r\n            if (Number(inputSymbol) > 3) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor - 1] === \"d\") {\r\n            if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"m\") {\r\n            if (Number(inputSymbol) > 1) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor - 1] === \"m\") {\r\n            if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\r\n              continue;\r\n            }\r\n          }\r\n          result += inputSymbol;\r\n          cursor++;\r\n        } else if (\r\n          this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1\r\n        ) {\r\n          result += maskExpression[cursor];\r\n          cursor++;\r\n          const shiftStep: number = /\\*|\\?/g.test(\r\n            maskExpression.slice(0, cursor)\r\n          )\r\n            ? inputArray.length\r\n            : cursor;\r\n          this._shift.add(shiftStep + this.prefix.length || 0);\r\n          i--;\r\n        } else if (\r\n          this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]] &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]].optional\r\n        ) {\r\n          cursor++;\r\n          i--;\r\n        } else if (\r\n          this.maskExpression[cursor + 1] === \"*\" &&\r\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\r\n          this._findSpecialChar(inputSymbol) ===\r\n            this.maskExpression[cursor + 2] &&\r\n          multi\r\n        ) {\r\n          cursor += 3;\r\n          result += inputSymbol;\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      result.length + 1 === maskExpression.length &&\r\n      this.maskSpecialCharacters.indexOf(\r\n        maskExpression[maskExpression.length - 1]\r\n      ) !== -1\r\n    ) {\r\n      result += maskExpression[maskExpression.length - 1];\r\n    }\r\n\r\n    let shift: number = 1;\r\n    let newPosition: number = position + 1;\r\n\r\n    while (this._shift.has(newPosition)) {\r\n      shift++;\r\n      newPosition++;\r\n    }\r\n\r\n    cb(this._shift.has(position) ? shift : 0);\r\n    let res: string = `${this.prefix}${result}`;\r\n    res = this.sufix\r\n      ? `${this.prefix}${result}${this.sufix}`\r\n      : `${this.prefix}${result}`;\r\n    if (result.length === 0) {\r\n      res = `${this.prefix}${result}`;\r\n    }\r\n    return res;\r\n  }\r\n  public _findSpecialChar(inputSymbol: string): undefined | string {\r\n    const symbol: string | undefined = this.maskSpecialCharacters.find(\r\n      (val: string) => val === inputSymbol\r\n    );\r\n    return symbol;\r\n  }\r\n\r\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\r\n    this.maskAvailablePatterns = this.customPattern\r\n      ? this.customPattern\r\n      : this.maskAvailablePatterns;\r\n    return (\r\n      this.maskAvailablePatterns[maskSymbol] &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\r\n    );\r\n  }\r\n\r\n  private separator = (str: string) => {\r\n    str += \"\";\r\n    const x: string[] = str.split(\".\");\r\n    const decimals: string = x.length > 1 ? `.${x[1]}` : \"\";\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, \"$1\" + \" \" + \"$2\");\r\n    }\r\n    return res + decimals;\r\n  };\r\n\r\n  private dotSeparator = (str: string) => {\r\n    str += \"\";\r\n    const x: string[] = str.split(\",\");\r\n    const decimals: string = x.length > 1 ? `,${x[1]}` : \"\";\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, \"$1\" + \".\" + \"$2\");\r\n    }\r\n    return res + decimals;\r\n  };\r\n\r\n  private comaSeparator = (str: string) => {\r\n    str += \"\";\r\n    const x: string[] = str.split(\".\");\r\n    const decimals: string =\r\n      x.length > 1 ? `.${+x[1] < 3 ? x[1] : x[1].substring(0, 2)}` : \"\";\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, \"$1\" + \",\" + \"$2\");\r\n    }\r\n    return res + decimals;\r\n  };\r\n\r\n  private percentage = (str: string): boolean => {\r\n    return Number(str) >= 0 && Number(str) <= 100;\r\n  };\r\n}\r\n","import {\r\n  Directive,\r\n  forwardRef,\r\n  HostListener,\r\n  Inject,\r\n  Input\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MaskService } from './mask.service';\r\nimport { IConfig } from './config';\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MaskDirective),\r\n      multi: true\r\n    },\r\n    MaskService\r\n  ]\r\n})\r\nexport class MaskDirective implements ControlValueAccessor {\r\n  private _maskValue: string;\r\n  private _inputValue: string;\r\n  private _position: number | null = null;\r\n  // tslint:disable-next-line\r\n  private _start: number;\r\n  private _end: number;\r\n  // tslint:disable-next-line\r\n  public onChange = (_: any) => { };\r\n  public onTouch = () => { };\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    private _maskService: MaskService\r\n  ) { }\r\n\r\n\r\n  @Input('mask')\r\n  public set maskExpression(value: string) {\r\n    this._maskValue = value || '';\r\n    if (!this._maskValue) {\r\n      return;\r\n    }\r\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue);\r\n    this._maskService.formElementProperty = [\r\n      'value',\r\n      this._maskService.applyMask(\r\n        this._inputValue,\r\n        this._maskService.maskExpression\r\n      )\r\n    ];\r\n  }\r\n\r\n  @Input()\r\n  public set specialCharacters(value: IConfig['specialCharacters']) {\r\n    if (\r\n      !value ||\r\n      !Array.isArray(value) ||\r\n      (Array.isArray(value) && !value.length)\r\n    ) {\r\n      return;\r\n    }\r\n    this._maskService.maskSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set patterns(value: IConfig['patterns']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.maskAvailablePatterns = value;\r\n  }\r\n\r\n  @Input()\r\n  public set prefix(value: IConfig['prefix']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.prefix = value;\r\n  }\r\n\r\n  @Input()\r\n  public set sufix(value: IConfig['sufix']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.sufix = value;\r\n  }\r\n\r\n  @Input()\r\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\r\n    this._maskService.dropSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set showMaskTyped(value: IConfig['showMaskTyped']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.showMaskTyped = value;\r\n  }\r\n\r\n  @Input()\r\n  public set shownMaskExpression(value: IConfig['shownMaskExpression']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.shownMaskExpression = value;\r\n  }\r\n\r\n  @Input()\r\n  public set showTemplate(value: IConfig['showTemplate']) {\r\n    this._maskService.showTemplate = value;\r\n  }\r\n\r\n  @Input()\r\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\r\n    this._maskService.clearIfNotMatch = value;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  public onInput(e: KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    this._inputValue = el.value;\r\n    if (!this._maskValue) {\r\n      this.onChange(el.value);\r\n      return;\r\n    }\r\n    const position: number = (el.selectionStart as number) === 1\r\n      ? (el.selectionStart as number) + this._maskService.prefix.length\r\n      : el.selectionStart as number;\r\n    let caretShift: number = 0;\r\n    this._maskService.applyValueChanges(\r\n      position,\r\n      (shift: number) => (caretShift = shift)\r\n    );\r\n    // only set the selection if the element is active\r\n    if (this.document.activeElement !== el) {\r\n      return;\r\n    }\r\n    el.selectionStart = el.selectionEnd =\r\n      this._position !== null\r\n        ? this._position\r\n        : position +\r\n        // tslint:disable-next-line\r\n        ((e as any).inputType === 'deleteContentBackward' ? 0 : caretShift);\r\n    this._position = null;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  public onBlur(): void {\r\n    this._maskService.clearIfNotMatchFn();\r\n    this.onTouch();\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  public onFocus(e: MouseEvent | KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    if (\r\n      el !== null && el.selectionStart !== null &&\r\n      el.selectionStart === el.selectionEnd &&\r\n      el.selectionStart > this._maskService.prefix.length &&\r\n      // tslint:disable-next-line\r\n      (e as any).keyCode !== 38\r\n    ) {\r\n      return;\r\n    }\r\n    if (this._maskService.showMaskTyped) {\r\n      this._maskService.maskIsShown = this._maskService.showMaskInInput();\r\n    }\r\n    el.value = !el.value || el.value === this._maskService.prefix\r\n      ? this._maskService.prefix + this._maskService.maskIsShown\r\n      : el.value;\r\n    /** fix of cursor position with prefix when mouse click occur */\r\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\r\n      el.selectionStart = this._maskService.prefix.length;\r\n      return;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  public a(e: KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    if (e.keyCode === 38) {\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 37 || e.keyCode === 8) {\r\n      if ((el.selectionStart as number) <= this._maskService.prefix.length\r\n        && (el.selectionEnd as number) <= this._maskService.prefix.length) {\r\n        e.preventDefault();\r\n      }\r\n      this.onFocus(e);\r\n      if (e.keyCode === 8\r\n        && el.selectionStart === 0\r\n        && el.selectionEnd === el.value.length) {\r\n        el.value = this._maskService.prefix;\r\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 1;\r\n        this.onInput(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('paste')\r\n  public onPaste(): void {\r\n    this._position = Number.MAX_SAFE_INTEGER;\r\n  }\r\n\r\n  /** It writes the value in the input */\r\n  public async writeValue(inputValue: string): Promise<void> {\r\n    if (inputValue === undefined) {\r\n      inputValue = '';\r\n    }\r\n    if (typeof inputValue === 'number') {\r\n      inputValue = String(inputValue);\r\n      this._maskService.isNumberValue = true;\r\n    }\r\n    inputValue && this._maskService.maskExpression ||\r\n      this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)\r\n      ? (this._maskService.formElementProperty = [\r\n        'value',\r\n        this._maskService.applyMask(\r\n          inputValue,\r\n          this._maskService.maskExpression\r\n        )\r\n      ])\r\n      : (this._maskService.formElementProperty = ['value', inputValue]);\r\n    this._inputValue = inputValue;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n    this._maskService.onChange = this.onChange;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  /** It disables the input element */\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    this._maskService.formElementProperty = ['disabled', isDisabled];\r\n  }\r\n  private _repeatPatternSymbols(maskExp: string): string {\r\n    return maskExp.match(/{[0-9]+}/)\r\n      && maskExp.split('')\r\n        .reduce((accum: string, currval: string, index: number): string => {\r\n          this._start = (currval === '{') ? index : this._start;\r\n\r\n          if (currval !== '}') {\r\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\r\n          }\r\n          this._end = index;\r\n          const repeatNumber: number = Number(maskExp\r\n            .slice(this._start + 1, this._end));\r\n          const repaceWith: string = new Array(repeatNumber + 1)\r\n            .join(maskExp[this._start - 1]);\r\n          return accum + repaceWith;\r\n        }, '') || maskExp;\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { IConfig } from './config';\r\n\r\n@Pipe({\r\n  name: 'mask',\r\n  pure: true\r\n})\r\nexport class MaskPipe implements PipeTransform {\r\n\r\n  public constructor(private _maskService: MaskApplierService) { }\r\n\r\n  public transform(value: string|number, mask: string | [string, IConfig['patterns']]): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n    if (typeof mask === 'string') {\r\n      return this._maskService.applyMask(`${value}`, mask);\r\n    }\r\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\r\n  }\r\n}\r\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { MaskApplierService } from './mask-applier.service';\r\n\r\n@Injectable()\r\nexport class MaskService extends MaskApplierService {\r\n  public maskExpression: string = '';\r\n  public isNumberValue: boolean = false;\r\n  public showMaskTyped: boolean = false;\r\n  public maskIsShown: string = '';\r\n  private _formElement: HTMLInputElement;\r\n  // tslint:disable-next-line\r\n  public onChange = (_: any) => {};\r\n  public onTouch = () => {};\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    @Inject(config) protected _config: IConfig,\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2\r\n  ) {\r\n    super(_config);\r\n    this._formElement = this._elementRef.nativeElement;\r\n  }\r\n\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): string  {\r\n\r\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\r\n    if (!inputValue && this.showMaskTyped) {\r\n      return this.prefix + this.maskIsShown;\r\n    }\r\n    const result: string  = super.applyMask(\r\n      inputValue,\r\n      maskExpression,\r\n      position,\r\n      cb\r\n    );\r\n    Array.isArray(this.dropSpecialCharacters)\r\n      ? this.onChange(this._removeMask(this._removeSufix(this._removePrefix(result)), this.dropSpecialCharacters))\r\n      : this.dropSpecialCharacters === true\r\n      ? this.onChange(\r\n        this.isNumberValue\r\n          ? Number(this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters))\r\n          : this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\r\n      )\r\n      : this.onChange(this._removeSufix(this._removePrefix(result)));\r\n    let ifMaskIsShown: string = '';\r\n    if (!this.showMaskTyped) {\r\n      return result;\r\n    }\r\n    const resLen: number = result.length;\r\n    const prefNmask: string = this.prefix + this.maskIsShown;\r\n    ifMaskIsShown = prefNmask.slice(resLen);\r\n    return result + ifMaskIsShown;\r\n  }\r\n\r\n  public applyValueChanges(\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): void {\r\n    const maskedInput: string | number = this.applyMask(\r\n      this._formElement.value,\r\n      this.maskExpression,\r\n      position,\r\n      cb\r\n    );\r\n    this._formElement.value = maskedInput;\r\n    if (this._formElement === this.document.activeElement) {\r\n      return;\r\n    }\r\n    this.clearIfNotMatchFn();\r\n  }\r\n\r\n  public showMaskInInput(): string {\r\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\r\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\r\n        throw new Error('Mask expression must match mask placeholder length');\r\n      } else {\r\n        return this.shownMaskExpression;\r\n      }\r\n    } else if (this.showMaskTyped) {\r\n      return this.maskExpression.replace(/\\w/g, '_');\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public clearIfNotMatchFn(): void {\r\n    if (\r\n      this.clearIfNotMatch === true &&\r\n      this.maskExpression.length !== this._formElement.value.length\r\n    ) {\r\n      this.formElementProperty = ['value', ''];\r\n      this.applyMask(this._formElement.value, this.maskExpression);\r\n    }\r\n  }\r\n\r\n  public set formElementProperty([name, value]: [string, string | boolean]) {\r\n    this._renderer.setProperty(this._formElement, name, value);\r\n  }\r\n\r\n  private _removeMask(\r\n    value: string,\r\n    specialCharactersForRemove: string[]\r\n  ): string {\r\n    return value\r\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\r\n      : value;\r\n  }\r\n\r\n  private _removePrefix(value: string): string {\r\n    if (!this.prefix) {\r\n      return value;\r\n    }\r\n    return value\r\n      ? value.replace(this.prefix, '')\r\n      : value;\r\n  }\r\n\r\n  private _removeSufix(value: string): string {\r\n    if (!this.sufix) {\r\n      return value;\r\n    }\r\n    return value\r\n      ? value.replace(this.sufix, '')\r\n      : value;\r\n  }\r\n\r\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\r\n    return new RegExp(\r\n      specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\r\n      'gi'\r\n    );\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { MaskDirective } from './mask.directive';\r\nimport { MaskPipe } from './mask.pipe';\r\n\r\n@NgModule({\r\n  providers: [MaskApplierService],\r\n  exports: [MaskDirective, MaskPipe],\r\n  declarations: [MaskDirective, MaskPipe]\r\n})\r\nexport class NgxMaskModule {\r\n\r\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaskModule,\r\n      providers: [\r\n        {\r\n          provide: NEW_CONFIG,\r\n          useValue: configValue\r\n        },\r\n        {\r\n          provide: INITIAL_CONFIG,\r\n          useValue: initialConfig\r\n        },\r\n        {\r\n          provide: config,\r\n          useFactory: _configFactory,\r\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\r\n        },\r\n      ]\r\n    };\r\n  }\r\n  public static forChild(configValue?: optionsConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaskModule,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _configFactory\r\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\r\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { IConfig } from 'public_api';\r\n\r\n@Component({\r\n  selector: 'test-mask',\r\n  template: `<input id='maska' [mask]=\"mask\"\r\n      [clearIfNotMatch]=\"clearIfNotMatch\"\r\n      [dropSpecialCharacters]=\"dropSpecialCharacters\"\r\n      [specialCharacters]=\"specialCharacters\"\r\n      [patterns]=\"patterns\"\r\n      [sufix]=\"sufix\"\r\n      [prefix]=\"prefix\"\r\n      [formControl]=\"form\"\r\n      [showMaskTyped] = \"showMaskTyped\"\r\n      [(ngModel)]=\"ngModelValue\">`,\r\n})\r\nexport class TestMaskComponent {\r\n  public mask: string | null;\r\n  public ngModelValue: string | number;\r\n  public form: FormControl = new FormControl(null);\r\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'] = true;\r\n  public clearIfNotMatch: IConfig['clearIfNotMatch'] = false;\r\n  public patterns: IConfig['patterns'];\r\n  public prefix: IConfig['prefix'] = '';\r\n  public sufix: IConfig['sufix'] = '';\r\n  public specialCharacters: IConfig['specialCharacters'];\r\n  public showMaskTyped: IConfig['showMaskTyped'] = false;\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `angular-cli.json`.\r\n\r\nexport const environment: Env = {\r\n  production: false\r\n};\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { environment } from './environments/environment';\r\nimport { AppModule } from './app/app.module';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n"],"sourceRoot":""}