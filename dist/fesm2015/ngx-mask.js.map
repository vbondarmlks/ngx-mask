{"version":3,"file":"ngx-mask.js.map","sources":["ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface IConfig {\r\n  sufix: string;\r\n  prefix: string;\r\n  clearIfNotMatch: boolean;\r\n  showTemplate: boolean;\r\n  showMaskTyped: boolean;\r\n  dropSpecialCharacters: boolean | string[];\r\n  specialCharacters: string[];\r\n  patterns: {\r\n    [character: string]: {\r\n      pattern: RegExp;\r\n      optional?: boolean;\r\n    };\r\n  };\r\n}\r\n\r\nexport type optionsConfig = Partial<IConfig>;\r\nexport const config: InjectionToken<string> = new InjectionToken(\"config\");\r\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken(\r\n  \"NEW_CONFIG\"\r\n);\r\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken(\r\n  \"INITIAL_CONFIG\"\r\n);\r\n\r\nexport const initialConfig: IConfig = {\r\n  sufix: \"\",\r\n  prefix: \"\",\r\n  clearIfNotMatch: false,\r\n  showTemplate: false,\r\n  showMaskTyped: false,\r\n  dropSpecialCharacters: true,\r\n  specialCharacters: [\r\n    \"-\",\r\n    \"/\",\r\n    \"(\",\r\n    \")\",\r\n    \":\",\r\n    \" \",\r\n    \"+\",\r\n    \",\",\r\n    \"@\",\r\n    \"[\",\r\n    \"]\",\r\n    '\"',\r\n    \"'\"\r\n  ],\r\n  patterns: {\r\n    \"0\": {\r\n      pattern: new RegExp(\"\\\\d\")\r\n    },\r\n    \"9\": {\r\n      pattern: new RegExp(\"\\\\d\"),\r\n      optional: true\r\n    },\r\n    A: {\r\n      pattern: new RegExp(\"[a-zA-Z0-9]\")\r\n    },\r\n    S: {\r\n      pattern: new RegExp(\"[a-zA-Z]\")\r\n    },\r\n    d: {\r\n      pattern: new RegExp(\"\\\\d\")\r\n    },\r\n    m: {\r\n      pattern: new RegExp(\"\\\\d\")\r\n    },\r\n    H: {\r\n      pattern: new RegExp(\"\\\\d\")\r\n    },\r\n    h: {\r\n      pattern: new RegExp(\"\\\\d\")\r\n    },\r\n    s: {\r\n      pattern: new RegExp(\"\\\\d\")\r\n    }\r\n  }\r\n};\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport { config, IConfig } from \"./config\";\r\n\r\n@Injectable()\r\nexport class MaskApplierService {\r\n  public dropSpecialCharacters: IConfig[\"dropSpecialCharacters\"];\r\n  public showTemplate: IConfig[\"showTemplate\"];\r\n  public clearIfNotMatch: IConfig[\"clearIfNotMatch\"];\r\n  public maskExpression: string = \"\";\r\n  public maskSpecialCharacters: IConfig[\"specialCharacters\"];\r\n  public maskAvailablePatterns: IConfig[\"patterns\"];\r\n  public prefix: IConfig[\"prefix\"];\r\n  public sufix: IConfig[\"sufix\"];\r\n  public customPattern: IConfig[\"patterns\"];\r\n\r\n  private _shift: Set<number>;\r\n\r\n  public constructor(@Inject(config) protected _config: IConfig) {\r\n    this._shift = new Set();\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\r\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.prefix = this._config.prefix;\r\n    this.sufix = this._config.sufix;\r\n  }\r\n  // tslint:disable-next-line:no-any\r\n  public applyMaskWithPattern(\r\n    inputValue: string,\r\n    maskAndPattern: [string, IConfig[\"patterns\"]]\r\n  ): string {\r\n    const [mask, customPattern] = maskAndPattern;\r\n    this.customPattern = customPattern;\r\n    return this.applyMask(inputValue, mask);\r\n  }\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): string {\r\n    if (\r\n      inputValue === undefined ||\r\n      inputValue === null ||\r\n      maskExpression === undefined\r\n    ) {\r\n      return \"\";\r\n    }\r\n    let cursor: number = 0;\r\n    let result: string = ``;\r\n    let multi: boolean = false;\r\n\r\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\r\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\r\n    }\r\n\r\n    const inputArray: string[] = inputValue.toString().split(\"\");\r\n    if (maskExpression === \"percent\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      if (this.persantage(inputValue)) {\r\n        result = inputValue;\r\n      } else {\r\n        result = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n    } else if (maskExpression === \"separator\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      const strForSep: string = inputValue.replace(/\\s/g, \"\");\r\n      result = this.separator(strForSep);\r\n      position = result.length + 1;\r\n      cursor = position;\r\n      const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\r\n        ? inputArray.length\r\n        : cursor;\r\n      this._shift.add(shiftStep + this.prefix.length || 0);\r\n    } else if (maskExpression === \"dot_separator\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      const strForSep: string = inputValue.replace(/\\./g, \"\");\r\n      result = this.dotSeparator(strForSep);\r\n      position = result.length + 1;\r\n      cursor = position;\r\n      const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\r\n        ? inputArray.length\r\n        : cursor;\r\n      this._shift.add(shiftStep + this.prefix.length || 0);\r\n    } else if (maskExpression === \"coma_separator\") {\r\n      if (\r\n        inputValue.match(\"[a-z]|[A-Z]\") ||\r\n        inputValue.match(/[!$%^&*()_+|~=`{}\\[\\]:\";'<>?\\/]/)\r\n      ) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n      const strForSep: string = inputValue.replace(/\\,/g, \"\");\r\n      result = this.comaSeparator(strForSep);\r\n      position = result.length + 1;\r\n      cursor = position;\r\n      const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\r\n        ? inputArray.length\r\n        : cursor;\r\n      this._shift.add(shiftStep + this.prefix.length || 0);\r\n    } else {\r\n      // tslint:disable-next-line\r\n      for (\r\n        let i: number = 0, inputSymbol: string = inputArray[0];\r\n        i < inputArray.length;\r\n        i++, inputSymbol = inputArray[i]\r\n      ) {\r\n        if (cursor === maskExpression.length) {\r\n          break;\r\n        }\r\n        if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n          maskExpression[cursor + 1] === \"?\"\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 2;\r\n        } else if (\r\n          maskExpression[cursor + 1] === \"*\" &&\r\n          multi &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n          multi = false;\r\n        } else if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n          maskExpression[cursor + 1] === \"*\"\r\n        ) {\r\n          result += inputSymbol;\r\n          multi = true;\r\n        } else if (\r\n          maskExpression[cursor + 1] === \"?\" &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\r\n          if (maskExpression[cursor] === \"H\") {\r\n            if (Number(inputSymbol) > 2) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"h\") {\r\n            if (result === \"2\" && Number(inputSymbol) > 3) {\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"m\") {\r\n            if (Number(inputSymbol) > 5) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"s\") {\r\n            if (Number(inputSymbol) > 5) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          result += inputSymbol;\r\n          cursor++;\r\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\r\n          if (maskExpression[cursor] === \"d\") {\r\n            if (Number(inputSymbol) > 3) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor - 1] === \"d\") {\r\n            if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === \"m\") {\r\n            if (Number(inputSymbol) > 1) {\r\n              result += 0;\r\n              cursor += 1;\r\n              const shiftStep: number = /\\*|\\?/g.test(\r\n                maskExpression.slice(0, cursor)\r\n              )\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor - 1] === \"m\") {\r\n            if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\r\n              continue;\r\n            }\r\n          }\r\n          result += inputSymbol;\r\n          cursor++;\r\n        } else if (\r\n          this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1\r\n        ) {\r\n          result += maskExpression[cursor];\r\n          cursor++;\r\n          const shiftStep: number = /\\*|\\?/g.test(\r\n            maskExpression.slice(0, cursor)\r\n          )\r\n            ? inputArray.length\r\n            : cursor;\r\n          this._shift.add(shiftStep + this.prefix.length || 0);\r\n          i--;\r\n        } else if (\r\n          this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]] &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]].optional\r\n        ) {\r\n          cursor++;\r\n          i--;\r\n        } else if (\r\n          this.maskExpression[cursor + 1] === \"*\" &&\r\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\r\n          this._findSpecialChar(inputSymbol) ===\r\n            this.maskExpression[cursor + 2] &&\r\n          multi\r\n        ) {\r\n          cursor += 3;\r\n          result += inputSymbol;\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      result.length + 1 === maskExpression.length &&\r\n      this.maskSpecialCharacters.indexOf(\r\n        maskExpression[maskExpression.length - 1]\r\n      ) !== -1\r\n    ) {\r\n      result += maskExpression[maskExpression.length - 1];\r\n    }\r\n\r\n    let shift: number = 1;\r\n    let newPosition: number = position + 1;\r\n\r\n    while (this._shift.has(newPosition)) {\r\n      shift++;\r\n      newPosition++;\r\n    }\r\n\r\n    cb(this._shift.has(position) ? shift : 0);\r\n    let res: string = `${this.prefix}${result}`;\r\n    res = this.sufix\r\n      ? `${this.prefix}${result}${this.sufix}`\r\n      : `${this.prefix}${result}`;\r\n    if (result.length === 0) {\r\n      res = `${this.prefix}${result}`;\r\n    }\r\n    return res;\r\n  }\r\n  public _findSpecialChar(inputSymbol: string): undefined | string {\r\n    const symbol: string | undefined = this.maskSpecialCharacters.find(\r\n      (val: string) => val === inputSymbol\r\n    );\r\n    return symbol;\r\n  }\r\n\r\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\r\n    this.maskAvailablePatterns = this.customPattern\r\n      ? this.customPattern\r\n      : this.maskAvailablePatterns;\r\n    return (\r\n      this.maskAvailablePatterns[maskSymbol] &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\r\n    );\r\n  }\r\n\r\n  private separator = (str: string) => {\r\n    str += \"\";\r\n    const x: string[] = str.split(\".\");\r\n    const decimals: string = x.length > 1 ? `.${x[1]}` : \"\";\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, \"$1\" + \" \" + \"$2\");\r\n    }\r\n    return res + decimals;\r\n  };\r\n\r\n  private dotSeparator = (str: string) => {\r\n    str += \"\";\r\n    const x: string[] = str.split(\",\");\r\n    const decimals: string = x.length > 1 ? `,${x[1]}` : \"\";\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, \"$1\" + \".\" + \"$2\");\r\n    }\r\n    return res + decimals;\r\n  };\r\n\r\n  private comaSeparator = (str: string) => {\r\n    str += \"\";\r\n    const x: string[] = str.split(\".\");\r\n    const decimals: string =\r\n      x.length > 1\r\n        ? `.${x[1].length < 3 ? x[1] : x[1].substring(0, 2)}`\r\n        : `.00`;\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, \"$1\" + \",\" + \"$2\");\r\n    }\r\n    return res + decimals;\r\n  };\r\n\r\n  private persantage = (str: string): boolean => {\r\n    if (Number(str) >= 0 && Number(str) <= 100) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n}\r\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { MaskApplierService } from './mask-applier.service';\r\n\r\n@Injectable()\r\nexport class MaskService extends MaskApplierService {\r\n  public maskExpression: string = '';\r\n  public isNumberValue: boolean = false;\r\n  public showMaskTyped: boolean = false;\r\n  public maskIsShown: string = '';\r\n  private _formElement: HTMLInputElement;\r\n  // tslint:disable-next-line\r\n  public onChange = (_: any) => {};\r\n  public onTouch = () => {};\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    @Inject(config) protected _config: IConfig,\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2\r\n  ) {\r\n    super(_config);\r\n    this._formElement = this._elementRef.nativeElement;\r\n  }\r\n\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): string  {\r\n\r\n    this.maskIsShown = this.showMaskTyped\r\n        ? this.maskExpression.replace(/\\w/g, '_')\r\n        : '';\r\n    if (!inputValue && this.showMaskTyped) {\r\n      return this.prefix + this.maskIsShown;\r\n    }\r\n    const result: string  = super.applyMask(\r\n      inputValue,\r\n      maskExpression,\r\n      position,\r\n      cb\r\n    );\r\n    Array.isArray(this.dropSpecialCharacters)\r\n        ? this.onChange(this._removeMask(this._removeSufix(this._removePrefix(result)), this.dropSpecialCharacters))\r\n        : this.dropSpecialCharacters === true\r\n         ? this.onChange(\r\n          this.isNumberValue\r\n             ? Number(this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters))\r\n             : this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\r\n            )\r\n         : this.onChange(this._removeSufix(this._removePrefix(result)));\r\n          let ifMaskIsShown: string = '';\r\n          if (!this.showMaskTyped) {\r\n            return result;\r\n          }\r\n          const resLen: number = result.length;\r\n          const prefNmask: string = this.prefix + this.maskIsShown;\r\n          ifMaskIsShown = prefNmask.slice(resLen);\r\n    return result + ifMaskIsShown;\r\n  }\r\n\r\n  public applyValueChanges(\r\n    position: number = 0,\r\n    cb: Function = () => {}\r\n  ): void {\r\n    const maskedInput: string | number = this.applyMask(\r\n      this._formElement.value,\r\n      this.maskExpression,\r\n      position,\r\n      cb\r\n    );\r\n    this._formElement.value = maskedInput;\r\n    if (this._formElement === this.document.activeElement) {\r\n      return;\r\n    }\r\n    this.clearIfNotMatchFn();\r\n  }\r\n\r\n  public showMaskInInput(): void {\r\n    if (this.showMaskTyped) {\r\n      this.maskIsShown = this.maskExpression.replace(/\\w/g, '_');\r\n    }\r\n  }\r\n\r\n  public clearIfNotMatchFn(): void {\r\n    if (\r\n      this.clearIfNotMatch === true &&\r\n      this.maskExpression.length !== this._formElement.value.length\r\n    ) {\r\n      this.formElementProperty = ['value', ''];\r\n      this.applyMask(this._formElement.value, this.maskExpression);\r\n    }\r\n  }\r\n\r\n  public set formElementProperty([name, value]: [string, string | boolean]) {\r\n    this._renderer.setProperty(this._formElement, name, value);\r\n  }\r\n\r\n  private _removeMask(\r\n    value: string,\r\n    specialCharactersForRemove: string[]\r\n  ): string {\r\n    return value\r\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\r\n      : value;\r\n  }\r\n\r\n  private _removePrefix(value: string): string {\r\n    if (!this.prefix) {\r\n      return value;\r\n    }\r\n    return value\r\n      ? value.replace(this.prefix, '')\r\n      : value;\r\n  }\r\n\r\n  private _removeSufix(value: string): string {\r\n    if (!this.sufix) {\r\n      return value;\r\n    }\r\n    return value\r\n      ? value.replace(this.sufix, '')\r\n      : value;\r\n  }\r\n\r\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\r\n    return new RegExp(\r\n      specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\r\n      'gi'\r\n    );\r\n  }\r\n}","import {\r\n  Directive,\r\n  forwardRef,\r\n  HostListener,\r\n  Inject,\r\n  Input\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MaskService } from './mask.service';\r\nimport { IConfig } from './config';\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MaskDirective),\r\n      multi: true\r\n    },\r\n    MaskService\r\n  ]\r\n})\r\nexport class MaskDirective implements ControlValueAccessor {\r\n  private _maskValue: string;\r\n  private _inputValue: string;\r\n  private _position: number | null = null;\r\n  // tslint:disable-next-line\r\n  private _start: number;\r\n  private _end: number;\r\n  // tslint:disable-next-line\r\n  public onChange = (_: any) => { };\r\n  public onTouch = () => { };\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    private _maskService: MaskService\r\n  ) { }\r\n\r\n\r\n  @Input('mask')\r\n  public set maskExpression(value: string) {\r\n    this._maskValue = value || '';\r\n    if (!this._maskValue) {\r\n      return;\r\n    }\r\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue);\r\n    this._maskService.formElementProperty = [\r\n      'value',\r\n      this._maskService.applyMask(\r\n        this._inputValue,\r\n        this._maskService.maskExpression\r\n      )\r\n    ];\r\n  }\r\n\r\n  @Input()\r\n  public set specialCharacters(value: IConfig['specialCharacters']) {\r\n    if (\r\n      !value ||\r\n      !Array.isArray(value) ||\r\n      (Array.isArray(value) && !value.length)\r\n    ) {\r\n      return;\r\n    }\r\n    this._maskService.maskSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set patterns(value: IConfig['patterns']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.maskAvailablePatterns = value;\r\n  }\r\n\r\n  @Input()\r\n  public set prefix(value: IConfig['prefix']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.prefix = value;\r\n  }\r\n\r\n  @Input()\r\n  public set sufix(value: IConfig['sufix']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.sufix = value;\r\n  }\r\n\r\n  @Input()\r\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\r\n    this._maskService.dropSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set showMaskTyped(value: IConfig['showMaskTyped']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.showMaskTyped = value;\r\n  }\r\n\r\n  @Input()\r\n  public set showTemplate(value: IConfig['showTemplate']) {\r\n    this._maskService.showTemplate = value;\r\n  }\r\n\r\n  @Input()\r\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\r\n    this._maskService.clearIfNotMatch = value;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  public onInput(e: KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    this._inputValue = el.value;\r\n    if (!this._maskValue) {\r\n      this.onChange(el.value);\r\n      return;\r\n    }\r\n    const position: number = (el.selectionStart as number) === 1\r\n      ? (el.selectionStart as number) + this._maskService.prefix.length\r\n      : el.selectionStart as number;\r\n    let caretShift: number = 0;\r\n    this._maskService.applyValueChanges(\r\n      position,\r\n      (shift: number) => (caretShift = shift)\r\n    );\r\n    // only set the selection if the element is active\r\n    if (this.document.activeElement !== el) {\r\n      return;\r\n    }\r\n    el.selectionStart = el.selectionEnd =\r\n      this._position !== null\r\n        ? this._position\r\n        : position +\r\n        // tslint:disable-next-line\r\n        ((e as any).inputType === 'deleteContentBackward' ? 0 : caretShift);\r\n    this._position = null;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  public onBlur(): void {\r\n    this._maskService.clearIfNotMatchFn();\r\n    this.onTouch();\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  public onFocus(e: MouseEvent | KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    if (\r\n      el !== null && el.selectionStart !== null &&\r\n      el.selectionStart === el.selectionEnd &&\r\n      el.selectionStart > this._maskService.prefix.length &&\r\n      // tslint:disable-next-line\r\n      (e as any).keyCode !== 38\r\n    ) {\r\n      return;\r\n    }\r\n    if (this._maskService.showMaskTyped) {\r\n      this._maskService.maskIsShown = this._maskService.maskExpression.replace(/[0-9]/g, '_');\r\n    }\r\n    el.value = !el.value || el.value === this._maskService.prefix\r\n      ? this._maskService.prefix + this._maskService.maskIsShown\r\n      : el.value;\r\n    /** fix of cursor position with prefix when mouse click occur */\r\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\r\n      el.selectionStart = this._maskService.prefix.length;\r\n      return;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  public a(e: KeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    if (e.keyCode === 38) {\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 37 || e.keyCode === 8) {\r\n      if ((el.selectionStart as number) <= this._maskService.prefix.length\r\n        && (el.selectionEnd as number) <= this._maskService.prefix.length) {\r\n        e.preventDefault();\r\n      }\r\n      this.onFocus(e);\r\n      if (e.keyCode === 8\r\n        && el.selectionStart === 0\r\n        && el.selectionEnd === el.value.length) {\r\n        el.value = this._maskService.prefix;\r\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 1;\r\n        this.onInput(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('paste')\r\n  public onPaste(): void {\r\n    this._position = Number.MAX_SAFE_INTEGER;\r\n  }\r\n\r\n  /** It writes the value in the input */\r\n  public async writeValue(inputValue: string): Promise<void> {\r\n    if (inputValue === undefined) {\r\n      inputValue = '';\r\n    }\r\n    if (typeof inputValue === 'number') {\r\n      inputValue = String(inputValue);\r\n      this._maskService.isNumberValue = true;\r\n    }\r\n    inputValue && this._maskService.maskExpression ||\r\n      this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)\r\n      ? (this._maskService.formElementProperty = [\r\n        'value',\r\n        this._maskService.applyMask(\r\n          inputValue,\r\n          this._maskService.maskExpression\r\n        )\r\n      ])\r\n      : (this._maskService.formElementProperty = ['value', inputValue]);\r\n    this._inputValue = inputValue;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n    this._maskService.onChange = this.onChange;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  /** It disables the input element */\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    this._maskService.formElementProperty = ['disabled', isDisabled];\r\n  }\r\n  private _repeatPatternSymbols(maskExp: string): string {\r\n    return maskExp.match(/{[0-9]+}/)\r\n      && maskExp.split('')\r\n        .reduce((accum: string, currval: string, index: number): string => {\r\n          this._start = (currval === '{') ? index : this._start;\r\n\r\n          if (currval !== '}') {\r\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\r\n          }\r\n          this._end = index;\r\n          const repeatNumber: number = Number(maskExp\r\n            .slice(this._start + 1, this._end));\r\n          const repaceWith: string = new Array(repeatNumber + 1)\r\n            .join(maskExp[this._start - 1]);\r\n          return accum + repaceWith;\r\n        }, '') || maskExp;\r\n  }\r\n\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { IConfig } from './config';\r\n\r\n@Pipe({\r\n  name: 'mask',\r\n  pure: true\r\n})\r\nexport class MaskPipe implements PipeTransform {\r\n\r\n  public constructor(private _maskService: MaskApplierService) { }\r\n\r\n  public transform(value: string|number, mask: string | [string, IConfig['patterns']]): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n    if (typeof mask === 'string') {\r\n      return this._maskService.applyMask(`${value}`, mask);\r\n    }\r\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { MaskDirective } from './mask.directive';\r\nimport { MaskPipe } from './mask.pipe';\r\n\r\n@NgModule({\r\n  providers: [MaskApplierService],\r\n  exports: [MaskDirective, MaskPipe],\r\n  declarations: [MaskDirective, MaskPipe]\r\n})\r\nexport class NgxMaskModule {\r\n\r\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaskModule,\r\n      providers: [\r\n        {\r\n          provide: NEW_CONFIG,\r\n          useValue: configValue\r\n        },\r\n        {\r\n          provide: INITIAL_CONFIG,\r\n          useValue: initialConfig\r\n        },\r\n        {\r\n          provide: config,\r\n          useFactory: _configFactory,\r\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\r\n        },\r\n      ]\r\n    };\r\n  }\r\n  public static forChild(configValue?: optionsConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaskModule,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _configFactory\r\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\r\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\r\n}\r\n"],"names":[],"mappings":"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"}
